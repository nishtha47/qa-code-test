const fs = require('fs');
const path = require('path');
const puppeteer = require('puppeteer');
const report = require('multiple-cucumber-html-reporter');

class SparkExtentReportGenerator {
    constructor() {
        this.reportsDir = './reports';
        this.extentDir = './reports/extent';
        this.pdfDir = './reports/pdf';
        this.ensureDirectories();
    }

    ensureDirectories() {
        [this.reportsDir, this.extentDir, this.pdfDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });
    }

    checkJsonFiles() {
        const jsonFiles = fs.readdirSync(this.reportsDir)
            .filter(file => file.endsWith('.json') && file.includes('cucumber'));
        
        if (jsonFiles.length === 0) {
            console.log('WARNING: No JSON files found in \'/reports\'. NO REPORT CAN BE CREATED!');
            console.log('Make sure your Cucumber tests are generating JSON output to reports/cucumber-report.json');
            return false;
        }
        
        console.log(`‚úÖ Found ${jsonFiles.length} JSON report file(s): ${jsonFiles.join(', ')}`);
        return true;
    }

    generateSparkHTMLReport() {
        const jsonReports = path.resolve(process.cwd(), 'reports');
        const htmlReports = path.resolve(process.cwd(), 'reports/extent');

        // Check if JSON files exist before proceeding
        if (!this.checkJsonFiles()) {
            throw new Error('No JSON report files found. Cannot generate HTML report.');
        }

        const reportConfig = {
            jsonDir: jsonReports,
            reportPath: htmlReports,
            reportName: 'Parabank Automation - Spark Report',
            pageTitle: 'Test Execution Dashboard',
            displayDuration: true,
            displayReportTime: true,
            useCDN: true,
            
            metadata: {
                browser: {
                    name: 'Chrome',
                    version: 'Latest'
                },
                device: 'Local Machine',
                platform: {
                    name: process.platform,
                    version: 'Latest'
                }
            },

            customData: {
                title: 'Test Execution Information',
                data: [
                    { label: 'Project', value: 'Parabank Automation' },
                    { label: 'Release', value: '1.0.0' },
                    { label: 'Environment', value: 'Test' },
                    { label: 'Framework', value: 'Playwright + Cucumber' },
                    { label: 'Report Style', value: 'Enhanced HTML Report' },
                    { label: 'Execution Start Time', value: new Date().toLocaleString() },
                    { label: 'Generated On', value: new Date().toLocaleString() }
                ]
            },

            // Additional configurations
            pageFooter: '<div style="text-align:center; font-size:12px; color:#666;">Generated by Parabank Automation Framework</div>',
            reportSuiteAsScenarios: true,
            scenarioTimestamp: true,
            launchReport: false,
            
            // Remove the problematic customStyle property
            // The library will use its default styling
        };

        try {
            report.generate(reportConfig);
            console.log('‚ú® HTML Report Generated Successfully!');
            console.log(`üìä Report Location: ${htmlReports}/index.html`);
            
            // Apply custom styling after report generation
            this.applyCustomStyling(htmlReports);
            
            return path.join(htmlReports, 'index.html');
        } catch (error) {
            console.error('‚ùå Error generating HTML report:', error);
            throw error;
        }
    }

    applyCustomStyling(htmlReportsPath) {
        try {
            // Apply custom CSS by modifying the generated HTML files
            const indexPath = path.join(htmlReportsPath, 'index.html');
            
            if (fs.existsSync(indexPath)) {
                let htmlContent = fs.readFileSync(indexPath, 'utf8');
                
                const customCSS = `
                <style>
                    .navbar-brand { color: #fff !important; }
                    .card { box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
                    .test-content { padding: 15px; }
                    .feature-head { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
                    .scenario-head { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
                    .step-details { font-family: 'Monaco', 'Consolas', monospace; }
                    
                    /* Enhanced styling for better visual appeal */
                    body { background-color: #f8f9fa; }
                    .container-fluid { background-color: white; margin: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                    .badge { font-size: 0.9em; }
                    .progress { height: 25px; }
                    
                    /* Custom header styling */
                    .page-header { 
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        padding: 20px;
                        margin-bottom: 30px;
                        border-radius: 10px 10px 0 0;
                    }
                </style>
                `;
                
                // Insert custom CSS before closing head tag
                htmlContent = htmlContent.replace('</head>', customCSS + '</head>');
                
                fs.writeFileSync(indexPath, htmlContent);
                console.log('üé® Custom styling applied successfully!');
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Warning: Could not apply custom styling:', error.message);
            // Don't throw error here, styling is optional
        }
    }

    async generatePDFReport(htmlReportPath) {
        console.log('üîÑ Converting HTML report to PDF...');
        
        try {
            const browser = await puppeteer.launch({ 
                headless: 'new',
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            await page.setViewport({ width: 1920, height: 1080 });
            
            // Navigate to the HTML report
            await page.goto(`file://${path.resolve(htmlReportPath)}`, { 
                waitUntil: 'networkidle0',
                timeout: 30000
            });

            // Wait for charts and dynamic content to load
            await page.waitForTimeout(3000);

            // Generate PDF with optimized settings
            const pdfPath = path.join(this.pdfDir, `parabank-test-report-${new Date().toISOString().split('T')[0]}.pdf`);
            
            await page.pdf({
                path: pdfPath,
                format: 'A4',
                printBackground: true,
                margin: {
                    top: '20px',
                    right: '20px',
                    bottom: '20px',
                    left: '20px'
                },
                displayHeaderFooter: true,
                headerTemplate: `
                    <div style="font-size: 10px; text-align: center; width: 100%; color: #666;">
                        Parabank Test Automation Report - Generated on ${new Date().toLocaleDateString()}
                    </div>
                `,
                footerTemplate: `
                    <div style="font-size: 10px; text-align: center; width: 100%; color: #666;">
                        <span class="pageNumber"></span> / <span class="totalPages"></span>
                    </div>
                `
            });

            await browser.close();
            
            console.log('üìÑ PDF Report Generated Successfully!');
            console.log(`üìÅ PDF Location: ${pdfPath}`);
            
            return pdfPath;
            
        } catch (error) {
            console.error('‚ùå Error generating PDF report:', error);
            throw error;
        }
    }

    async generateEmailableReport(htmlReportPath) {
        console.log('üìß Generating emailable HTML report...');
        
        try {
            const htmlContent = fs.readFileSync(htmlReportPath, 'utf8');
            
            // Create a simplified version for email
            const emailableHTML = this.createEmailableHTML(htmlContent);
            
            const emailablePath = path.join(this.extentDir, 'emailable-report.html');
            fs.writeFileSync(emailablePath, emailableHTML);
            
            console.log('‚úÖ Emailable Report Generated!');
            console.log(`üìß Emailable Report: ${emailablePath}`);
            
            return emailablePath;
            
        } catch (error) {
            console.error('‚ùå Error generating emailable report:', error);
            throw error;
        }
    }

    createEmailableHTML(originalHTML) {
        // Extract key statistics and create a simplified email-friendly version
        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Parabank Test Execution Summary</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background: #667eea; color: white; padding: 15px; text-align: center; }
                .summary { margin: 20px 0; }
                .stats { display: flex; justify-content: space-around; margin: 20px 0; }
                .stat-box { text-align: center; padding: 15px; border: 1px solid #ddd; }
                .pass { background: #d4edda; color: #155724; }
                .fail { background: #f8d7da; color: #721c24; }
                .skip { background: #fff3cd; color: #856404; }
                .footer { margin-top: 30px; text-align: center; color: #666; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Parabank Test Automation Report</h1>
                <p>Generated on ${new Date().toLocaleString()}</p>
            </div>
            
            <div class="summary">
                <h2>Test Execution Summary</h2>
                <div class="stats">
                    <div class="stat-box pass">
                        <h3>Passed</h3>
                        <p id="passed-count">-</p>
                    </div>
                    <div class="stat-box fail">
                        <h3>Failed</h3>
                        <p id="failed-count">-</p>
                    </div>
                    <div class="stat-box skip">
                        <h3>Skipped</h3>
                        <p id="skipped-count">-</p>
                    </div>
                </div>
            </div>
            
            <div class="footer">
                <p>For detailed report, please check the attached HTML/PDF files.</p>
                <p>Framework: Playwright + Cucumber | Environment: Test</p>
            </div>
        </body>
        </html>`;
    }

    async generateAllReports() {
        try {
            console.log('üöÄ Starting Spark Report Generation Process...');
            
            // Step 1: Generate HTML Report
            const htmlReportPath = this.generateSparkHTMLReport();
            
            // Step 2: Generate PDF Report
            const pdfReportPath = await this.generatePDFReport(htmlReportPath);
            
            // Step 3: Generate Emailable Report
            const emailablePath = await this.generateEmailableReport(htmlReportPath);
            
            console.log('\nüéâ All Reports Generated Successfully!');
            console.log('üìä Report Summary:');
            console.log(`   üìÑ HTML Report: ${htmlReportPath}`);
            console.log(`   üìÑ PDF Report: ${pdfReportPath}`);
            console.log(`   üìß Emailable Report: ${emailablePath}`);
            
            return {
                html: htmlReportPath,
                pdf: pdfReportPath,
                emailable: emailablePath
            };
            
        } catch (error) {
            console.error('‚ùå Error in report generation process:', error);
            throw error;
        }
    }
}

// Export for use in other files
module.exports = { SparkExtentReportGenerator };

// Allow direct execution
if (require.main === module) {
    const generator = new SparkExtentReportGenerator();
    generator.generateAllReports()
        .then(() => {
            console.log('‚úÖ Report generation completed successfully!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Report generation failed:', error);
            process.exit(1);
        });
}